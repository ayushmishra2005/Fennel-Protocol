//! Autogenerated weights for `pallet_treasury`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_treasury
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions needed for pallet_treasury.
pub trait WeightInfo {
    fn spend() -> Weight;
    fn propose_spend() -> Weight;
    fn reject_proposal() -> Weight;
    fn approve_proposal(p: u32) -> Weight;
    fn remove_approval() -> Weight;
    fn on_initialize_proposals(p: u32) -> Weight;
}

/// Weights for pallet_treasury using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_treasury::WeightInfo for SubstrateWeight<T> {
    fn spend() -> Weight {
        Weight::from_parts(0, 0)
    }
    /// Storage: Treasury ProposalCount (r:1 w:1)
    /// Proof: Treasury ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode:
    /// MaxEncodedLen) Storage: Treasury Proposals (r:0 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen)
    fn propose_spend() -> Weight {
        Weight::from_parts(30_000_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode:
    /// MaxEncodedLen)
    fn reject_proposal() -> Weight {
        Weight::from_parts(31_000_000, 3593)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:0)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen) The range of component `p` is `[0, 63]`.
    fn approve_proposal(p: u32) -> Weight {
        Weight::from_parts(9_649_107, 3573)
            // Standard Error: 1_393
            .saturating_add(Weight::from_parts(92_067, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen)
    fn remove_approval() -> Weight {
        Weight::from_parts(7_000_000, 1743)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: System Account (r:129 w:129)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode:
    /// MaxEncodedLen) Storage: Treasury Deactivated (r:1 w:1)
    /// Proof: Treasury Deactivated (max_values: Some(1), max_size: Some(16), added: 511, mode:
    /// MaxEncodedLen) Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen) Storage: Treasury Proposals (r:64 w:64)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) The range of component `p` is `[0, 64]`.
    fn on_initialize_proposals(p: u32) -> Weight {
        Weight::from_parts(38_731_454, 3593)
            // Standard Error: 30_599
            .saturating_add(Weight::from_parts(46_676_716, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(3_u64))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 5206).saturating_mul(p.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 0_000 picoseconds.
        Weight::from_parts(0, 0)
    }
    /// Storage: Treasury ProposalCount (r:1 w:1)
    /// Proof: Treasury ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode:
    /// MaxEncodedLen) Storage: Treasury Proposals (r:0 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen)
    fn propose_spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `143`
        //  Estimated: `1489`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(30_000_000, 1489)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode:
    /// MaxEncodedLen)
    fn reject_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `301`
        //  Estimated: `3593`
        // Minimum execution time: 29_000_000 picoseconds.
        Weight::from_parts(31_000_000, 3593)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:0)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen) The range of component `p` is `[0, 63]`.
    fn approve_proposal(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `338 + p * (12 ±0)`
        //  Estimated: `3573`
        // Minimum execution time: 7_000_000 picoseconds.
        Weight::from_parts(9_649_107, 3573)
            // Standard Error: 1_393
            .saturating_add(Weight::from_parts(92_067, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen)
    fn remove_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `127`
        //  Estimated: `1743`
        // Minimum execution time: 6_000_000 picoseconds.
        Weight::from_parts(7_000_000, 1743)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: System Account (r:129 w:129)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode:
    /// MaxEncodedLen) Storage: Treasury Deactivated (r:1 w:1)
    /// Proof: Treasury Deactivated (max_values: Some(1), max_size: Some(16), added: 511, mode:
    /// MaxEncodedLen) Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(258), added: 753, mode:
    /// MaxEncodedLen) Storage: Treasury Proposals (r:64 w:64)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode:
    /// MaxEncodedLen) The range of component `p` is `[0, 64]`.
    fn on_initialize_proposals(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `270 + p * (254 ±0)`
        //  Estimated: `3593 + p * (5206 ±0)`
        // Minimum execution time: 29_000_000 picoseconds.
        Weight::from_parts(38_731_454, 3593)
            // Standard Error: 30_599
            .saturating_add(Weight::from_parts(46_676_716, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(p.into())))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
            .saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 5206).saturating_mul(p.into()))
    }
}
