
//! Autogenerated weights for `pallet_keystore`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-30, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_keystore
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_keystore.
pub trait WeightInfo {
	fn announce_key() -> Weight;
	fn revoke_key() -> Weight;
	fn issue_encryption_key() -> Weight;
}

/// Weights for pallet_keystore using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Keystore IssuedKeys (r:0 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key() -> Weight {
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:0 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_key() -> Weight {
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedEncryptionKeys (r:0 w:1)
	/// Proof: Keystore IssuedEncryptionKeys (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	fn issue_encryption_key() -> Weight {
		Weight::from_parts(9_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Keystore IssuedKeys (r:0 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn announce_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedKeys (r:0 w:1)
	/// Proof Skipped: Keystore IssuedKeys (max_values: None, max_size: None, mode: Measured)
	fn revoke_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Keystore IssuedEncryptionKeys (r:0 w:1)
	/// Proof: Keystore IssuedEncryptionKeys (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	fn issue_encryption_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}