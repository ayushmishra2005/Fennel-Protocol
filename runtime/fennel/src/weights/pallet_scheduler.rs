//! Autogenerated weights for `pallet_scheduler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-27, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_scheduler
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
    fn service_agendas_base() -> Weight;
    fn service_agenda_base(s: u32) -> Weight;
    fn service_task_base() -> Weight;
    fn service_task_fetched(s: u32) -> Weight;
    fn service_task_named() -> Weight;
    fn service_task_periodic() -> Weight;
    fn execute_dispatch_signed() -> Weight;
    fn execute_dispatch_unsigned() -> Weight;
    fn schedule(s: u32) -> Weight;
    fn cancel(s: u32) -> Weight;
    fn schedule_named(s: u32) -> Weight;
    fn cancel_named(s: u32) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for SubstrateWeight<T> {
    /// Storage: Scheduler IncompleteSince (r:1 w:1)
    /// Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(4), added: 499, mode:
    /// MaxEncodedLen)
    fn service_agendas_base() -> Weight {
        Weight::from_parts(3_000_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32) -> Weight {
        Weight::from_parts(5_979_200, 42428)
            // Standard Error: 854
            .saturating_add(Weight::from_parts(808_457, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_base() -> Weight {
        Weight::from_parts(5_000_000, 0)
    }
    /// Storage: Preimage PreimageFor (r:1 w:1)
    /// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819,
    /// mode: Measured) Storage: Preimage StatusFor (r:1 w:1)
    /// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode:
    /// MaxEncodedLen) The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        Weight::from_parts(19_000_000, 3678)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(756, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
    }
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen)
    fn service_task_named() -> Weight {
        Weight::from_parts(7_000_000, 0).saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_periodic() -> Weight {
        Weight::from_parts(5_000_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        Weight::from_parts(3_000_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        Weight::from_parts(3_000_000, 0)
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 49]`.
    fn schedule(s: u32) -> Weight {
        Weight::from_parts(13_493_906, 42428)
            // Standard Error: 2_167
            .saturating_add(Weight::from_parts(868_058, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) The range of component `s` is `[1, 50]`.
    fn cancel(s: u32) -> Weight {
        Weight::from_parts(15_728_271, 42428)
            // Standard Error: 1_544
            .saturating_add(Weight::from_parts(1_408_617, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32) -> Weight {
        Weight::from_parts(17_112_164, 42428)
            // Standard Error: 2_484
            .saturating_add(Weight::from_parts(955_336, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32) -> Weight {
        Weight::from_parts(17_941_331, 42428)
            // Standard Error: 2_319
            .saturating_add(Weight::from_parts(1_458_635, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: Scheduler IncompleteSince (r:1 w:1)
    /// Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(4), added: 499, mode:
    /// MaxEncodedLen)
    fn service_agendas_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `31`
        //  Estimated: `1489`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(3_000_000, 1489)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `78 + s * (177 ±0)`
        //  Estimated: `42428`
        // Minimum execution time: 3_000_000 picoseconds.
        Weight::from_parts(5_979_200, 42428)
            // Standard Error: 854
            .saturating_add(Weight::from_parts(808_457, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn service_task_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(5_000_000, 0)
    }
    /// Storage: Preimage PreimageFor (r:1 w:1)
    /// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819,
    /// mode: Measured) Storage: Preimage StatusFor (r:1 w:1)
    /// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode:
    /// MaxEncodedLen) The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `213 + s * (1 ±0)`
        //  Estimated: `3678 + s * (1 ±0)`
        // Minimum execution time: 18_000_000 picoseconds.
        Weight::from_parts(19_000_000, 3678)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(756, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
    }
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen)
    fn service_task_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_000_000 picoseconds.
        Weight::from_parts(7_000_000, 0).saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn service_task_periodic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_000_000 picoseconds.
        Weight::from_parts(5_000_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000_000 picoseconds.
        Weight::from_parts(3_000_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000_000 picoseconds.
        Weight::from_parts(3_000_000, 0)
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 49]`.
    fn schedule(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `78 + s * (177 ±0)`
        //  Estimated: `42428`
        // Minimum execution time: 11_000_000 picoseconds.
        Weight::from_parts(13_493_906, 42428)
            // Standard Error: 2_167
            .saturating_add(Weight::from_parts(868_058, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) The range of component `s` is `[1, 50]`.
    fn cancel(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `78 + s * (177 ±0)`
        //  Estimated: `42428`
        // Minimum execution time: 14_000_000 picoseconds.
        Weight::from_parts(15_728_271, 42428)
            // Standard Error: 1_544
            .saturating_add(Weight::from_parts(1_408_617, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `254 + s * (185 ±0)`
        //  Estimated: `42428`
        // Minimum execution time: 14_000_000 picoseconds.
        Weight::from_parts(17_112_164, 42428)
            // Standard Error: 2_484
            .saturating_add(Weight::from_parts(955_336, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(48), added: 2523, mode:
    /// MaxEncodedLen) Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(38963), added: 41438, mode:
    /// MaxEncodedLen) The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `275 + s * (185 ±0)`
        //  Estimated: `42428`
        // Minimum execution time: 17_000_000 picoseconds.
        Weight::from_parts(17_941_331, 42428)
            // Standard Error: 2_319
            .saturating_add(Weight::from_parts(1_458_635, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}
