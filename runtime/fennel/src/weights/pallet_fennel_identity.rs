
//! Autogenerated weights for `pallet_fennel_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-21, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("fennel-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=fennel-local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_fennel_identity
// --extrinsic=*
// --steps=100
// --repeat=10
// --template=./scripts/templates/parachain-weight-template.hbs
// --output=./runtime/fennel/src/weights

#![allow(unused_parens, unused_imports)]
#![allow(clippy::unnecessary_cast, clippy::missing_docs_in_private_items)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_fennel_identity.
pub trait WeightInfo {
	fn create_identity(s: u32, ) -> Weight;
	fn revoke_identity(s: u32, ) -> Weight;
	fn add_or_update_identity_trait(s: u32, ) -> Weight;
	fn remove_identity_trait(s: u32, ) -> Weight;
	fn sign_for_identity(s: u32, ) -> Weight;
}

/// Weights for pallet_fennel_identity using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Identity IdentityNumber (r:1 w:1)
	/// Proof: Identity IdentityNumber (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity IdentityList (r:1 w:1)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn create_identity(_s: u32, ) -> Weight {
		Weight::from_parts(14_423_563, 3469)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Identity RevokedIdentityNumber (r:1 w:1)
	/// Proof: Identity RevokedIdentityNumber (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity IdentityList (r:1 w:1)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn revoke_identity(_s: u32, ) -> Weight {
		Weight::from_parts(16_500_064, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityTraitList (r:1 w:1)
	/// Proof Skipped: Identity IdentityTraitList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn add_or_update_identity_trait(_s: u32, ) -> Weight {
		Weight::from_parts(15_376_501, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityTraitList (r:0 w:1)
	/// Proof Skipped: Identity IdentityTraitList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn remove_identity_trait(_s: u32, ) -> Weight {
		Weight::from_parts(14_523_893, 3608)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity SignalCount (r:1 w:1)
	/// Proof: Identity SignalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity SignatureSignal (r:0 w:1)
	/// Proof Skipped: Identity SignatureSignal (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn sign_for_identity(s: u32, ) -> Weight {
		Weight::from_parts(18_418_184, 3574)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Identity IdentityNumber (r:1 w:1)
	/// Proof: Identity IdentityNumber (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity IdentityList (r:1 w:1)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn create_identity(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3469`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_423_563, 3469)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Identity RevokedIdentityNumber (r:1 w:1)
	/// Proof: Identity RevokedIdentityNumber (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity IdentityList (r:1 w:1)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn revoke_identity(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_500_064, 3574)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityTraitList (r:1 w:1)
	/// Proof Skipped: Identity IdentityTraitList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn add_or_update_identity_trait(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_376_501, 3574)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity IdentityTraitList (r:0 w:1)
	/// Proof Skipped: Identity IdentityTraitList (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn remove_identity_trait(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `143`
		//  Estimated: `3608`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_523_893, 3608)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Identity IdentityList (r:1 w:0)
	/// Proof Skipped: Identity IdentityList (max_values: None, max_size: None, mode: Measured)
	/// Storage: Identity SignalCount (r:1 w:1)
	/// Proof: Identity SignalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Identity SignatureSignal (r:0 w:1)
	/// Proof Skipped: Identity SignatureSignal (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[0, 100000]`.
	fn sign_for_identity(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_418_184, 3574)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}